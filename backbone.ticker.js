// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.Ticker = (function(_super) {

    __extends(Ticker, _super);

    function Ticker() {
      return Ticker.__super__.constructor.apply(this, arguments);
    }

    Ticker.prototype.defaults = {
      interval: 1000,
      id: null,
      payload: function() {}
    };

    Ticker.prototype.initialize = function() {
      this.on('change:id', this.clearOldProcess, this);
      return this;
    };

    Ticker.prototype.validate = function(attrs, options) {
      if (typeof attrs.payload !== 'function') {
        return "Payload must be a function";
      }
    };

    Ticker.prototype.start = function(payload) {
      if (payload == null) {
        payload = null;
      }
      if (!!payload) {
        this.set('payload', payload, {
          validate: true
        });
      }
      return this.tick();
    };

    Ticker.prototype.stop = function() {
      if (this.pause()) {
        return this.set('payload', (function() {}));
      }
    };

    Ticker.prototype.pause = function() {
      if (this.isRunning()) {
        return !!this.set('id', null);
      } else {
        return false;
      }
    };

    Ticker.prototype.resume = function() {
      return this.tick();
    };

    Ticker.prototype.nudge = function() {
      if (this.isRunning() && this.pause()) {
        return this.payloadWithNextTick();
      }
    };

    Ticker.prototype.tick = function(options) {
      if (options == null) {
        options = {};
      }
      return this.set('id', this.scheduleTick(), options);
    };

    Ticker.prototype.scheduleTick = function() {
      var _this = this;
      return setTimeout((function() {
        return _this.payloadWithNextTick();
      }), this.get('interval'));
    };

    Ticker.prototype.payloadWithNextTick = function() {
      this.get('payload')();
      return this.tick({
        silent: true
      });
    };

    Ticker.prototype.clearOldProcess = function() {
      return !clearTimeout(this.previous('id'));
    };

    Ticker.prototype.isRunning = function() {
      return !!this.get('id');
    };

    return Ticker;

  })(Backbone.Model);

}).call(this);
